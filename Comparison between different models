{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import libraries\n",
    "import datetime, warnings, scipy \n",
    "import pandas as pd\n",
    "from pandas import Series, DataFrame\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt \n",
    "import matplotlib as mpl\n",
    "import seaborn as sns\n",
    "import random\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#read 3 input files \n",
    "# flight : details related to flights arrival,departure,delaytime,delay reason,corresponding airline etc.\n",
    "# airports : mapping of airline code and its name\n",
    "# airlines : mapping of airport_code and airport name ,city,state etc \n",
    "#df = pd.read_csv(\"flight_delay_2019_header_rename.csv\", low_memory=False)\n",
    "df2 = pd.read_csv(\"flights.csv\", low_memory=False)\n",
    "#airports = pd.read_csv(\"airports.csv\")\n",
    "#airlines = pd.read_csv(\"airlines.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['YEAR',\n",
       " 'MONTH',\n",
       " 'DAY',\n",
       " 'DAY_OF_WEEK',\n",
       " 'AIRLINE',\n",
       " 'FLIGHT_NUMBER',\n",
       " 'TAIL_NUMBER',\n",
       " 'ORIGIN_AIRPORT',\n",
       " 'DESTINATION_AIRPORT',\n",
       " 'SCHEDULED_DEPARTURE',\n",
       " 'DEPARTURE_TIME',\n",
       " 'DEPARTURE_DELAY',\n",
       " 'TAXI_OUT',\n",
       " 'WHEELS_OFF',\n",
       " 'SCHEDULED_TIME',\n",
       " 'ELAPSED_TIME',\n",
       " 'AIR_TIME',\n",
       " 'DISTANCE',\n",
       " 'WHEELS_ON',\n",
       " 'TAXI_IN',\n",
       " 'SCHEDULED_ARRIVAL',\n",
       " 'ARRIVAL_TIME',\n",
       " 'ARRIVAL_DELAY',\n",
       " 'DIVERTED',\n",
       " 'CANCELLED',\n",
       " 'CANCELLATION_REASON',\n",
       " 'AIR_SYSTEM_DELAY',\n",
       " 'SECURITY_DELAY',\n",
       " 'AIRLINE_DELAY',\n",
       " 'LATE_AIRCRAFT_DELAY',\n",
       " 'WEATHER_DELAY']"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(df2.columns.values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision tree based on origin,destination and airline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df2[['AIRLINE', 'ORIGIN_AIRPORT', 'DESTINATION_AIRPORT','DEPARTURE_DELAY','DAY_OF_WEEK','WEATHER_DELAY','SECURITY_DELAY','AIR_SYSTEM_DELAY','AIRLINE_DELAY','LATE_AIRCRAFT_DELAY']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AIRLINE</th>\n",
       "      <th>ORIGIN_AIRPORT</th>\n",
       "      <th>DESTINATION_AIRPORT</th>\n",
       "      <th>DEPARTURE_DELAY</th>\n",
       "      <th>DAY_OF_WEEK</th>\n",
       "      <th>WEATHER_DELAY</th>\n",
       "      <th>SECURITY_DELAY</th>\n",
       "      <th>AIR_SYSTEM_DELAY</th>\n",
       "      <th>AIRLINE_DELAY</th>\n",
       "      <th>LATE_AIRCRAFT_DELAY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  AIRLINE ORIGIN_AIRPORT DESTINATION_AIRPORT  DEPARTURE_DELAY  DAY_OF_WEEK  \\\n",
       "0      9E            MSP                 CVG            -10.0            6   \n",
       "1      9E            MSP                 CVG             -4.0            7   \n",
       "2      9E            MSP                 CVG             -9.0            1   \n",
       "3      9E            MSP                 CVG             -4.0            2   \n",
       "4      9E            MSP                 CVG             -6.0            3   \n",
       "\n",
       "   WEATHER_DELAY  SECURITY_DELAY  AIR_SYSTEM_DELAY  AIRLINE_DELAY  \\\n",
       "0            NaN             NaN               NaN            NaN   \n",
       "1            NaN             NaN               NaN            NaN   \n",
       "2            NaN             NaN               NaN            NaN   \n",
       "3            NaN             NaN               NaN            NaN   \n",
       "4            NaN             NaN               NaN            NaN   \n",
       "\n",
       "   LATE_AIRCRAFT_DELAY  \n",
       "0                  NaN  \n",
       "1                  NaN  \n",
       "2                  NaN  \n",
       "3                  NaN  \n",
       "4                  NaN  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIRLINE                1048572\n",
       "ORIGIN_AIRPORT         1048572\n",
       "DESTINATION_AIRPORT    1048572\n",
       "DEPARTURE_DELAY        1019735\n",
       "DAY_OF_WEEK            1048572\n",
       "WEATHER_DELAY           207265\n",
       "SECURITY_DELAY          207265\n",
       "AIR_SYSTEM_DELAY        207265\n",
       "AIRLINE_DELAY           207265\n",
       "LATE_AIRCRAFT_DELAY     207265\n",
       "dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AIRLINE</th>\n",
       "      <th>ORIGIN_AIRPORT</th>\n",
       "      <th>DESTINATION_AIRPORT</th>\n",
       "      <th>DEPARTURE_DELAY</th>\n",
       "      <th>DAY_OF_WEEK</th>\n",
       "      <th>WEATHER_DELAY</th>\n",
       "      <th>SECURITY_DELAY</th>\n",
       "      <th>AIR_SYSTEM_DELAY</th>\n",
       "      <th>AIRLINE_DELAY</th>\n",
       "      <th>LATE_AIRCRAFT_DELAY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  AIRLINE ORIGIN_AIRPORT DESTINATION_AIRPORT  DEPARTURE_DELAY  DAY_OF_WEEK  \\\n",
       "0      9E            MSP                 CVG            -10.0            6   \n",
       "1      9E            MSP                 CVG             -4.0            7   \n",
       "2      9E            MSP                 CVG             -9.0            1   \n",
       "3      9E            MSP                 CVG             -4.0            2   \n",
       "4      9E            MSP                 CVG             -6.0            3   \n",
       "\n",
       "   WEATHER_DELAY  SECURITY_DELAY  AIR_SYSTEM_DELAY  AIRLINE_DELAY  \\\n",
       "0            NaN             NaN               NaN            NaN   \n",
       "1            NaN             NaN               NaN            NaN   \n",
       "2            NaN             NaN               NaN            NaN   \n",
       "3            NaN             NaN               NaN            NaN   \n",
       "4            NaN             NaN               NaN            NaN   \n",
       "\n",
       "   LATE_AIRCRAFT_DELAY  \n",
       "0                  NaN  \n",
       "1                  NaN  \n",
       "2                  NaN  \n",
       "3                  NaN  \n",
       "4                  NaN  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIRLINE                1048572\n",
       "ORIGIN_AIRPORT         1048572\n",
       "DESTINATION_AIRPORT    1048572\n",
       "DEPARTURE_DELAY        1019735\n",
       "DAY_OF_WEEK            1048572\n",
       "WEATHER_DELAY           207265\n",
       "SECURITY_DELAY          207265\n",
       "AIR_SYSTEM_DELAY        207265\n",
       "AIRLINE_DELAY           207265\n",
       "LATE_AIRCRAFT_DELAY     207265\n",
       "dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIRLINE                207265\n",
       "ORIGIN_AIRPORT         207265\n",
       "DESTINATION_AIRPORT    207265\n",
       "DEPARTURE_DELAY        207265\n",
       "DAY_OF_WEEK            207265\n",
       "WEATHER_DELAY          207265\n",
       "SECURITY_DELAY         207265\n",
       "AIR_SYSTEM_DELAY       207265\n",
       "AIRLINE_DELAY          207265\n",
       "LATE_AIRCRAFT_DELAY    207265\n",
       "dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1e19e3d0>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Correlation matrix\n",
    "fig, ax = plt.subplots()\n",
    "fig.set_size_inches(7,7)\n",
    "corr = df.corr()\n",
    "sns.heatmap(corr)\n",
    "#display(fig)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Divide data into Train and Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\n",
    "df_train,df_test = train_test_split(df, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIRLINE                51817\n",
       "ORIGIN_AIRPORT         51817\n",
       "DESTINATION_AIRPORT    51817\n",
       "DEPARTURE_DELAY        51817\n",
       "DAY_OF_WEEK            51817\n",
       "WEATHER_DELAY          51817\n",
       "SECURITY_DELAY         51817\n",
       "AIR_SYSTEM_DELAY       51817\n",
       "AIRLINE_DELAY          51817\n",
       "LATE_AIRCRAFT_DELAY    51817\n",
       "dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs = df_train.drop('DEPARTURE_DELAY',axis='columns')\n",
    "target = df_train['DEPARTURE_DELAY']\n",
    "df_test.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AIRLINE                207265\n",
       "ORIGIN_AIRPORT         207265\n",
       "DESTINATION_AIRPORT    207265\n",
       "DEPARTURE_DELAY        207265\n",
       "DAY_OF_WEEK            207265\n",
       "WEATHER_DELAY          207265\n",
       "SECURITY_DELAY         207265\n",
       "AIR_SYSTEM_DELAY       207265\n",
       "AIRLINE_DELAY          207265\n",
       "LATE_AIRCRAFT_DELAY    207265\n",
       "dtype: int64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs_test = df_test.drop('DEPARTURE_DELAY',axis='columns')\n",
    "target_test = df_test['DEPARTURE_DELAY']\n",
    "df.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Format Train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "le_AIRLINE = LabelEncoder()\n",
    "le_ORIGIN_AIRPORT = LabelEncoder()\n",
    "le_DESTINATION_AIRPORT = LabelEncoder()\n",
    "le_DAY_OF_WEEK = LabelEncoder()\n",
    "le_WEATHER_DELAY = LabelEncoder()\n",
    "le_SECURITY_DELAY = LabelEncoder()\n",
    "le_AIR_SYSTEM_DELAY = LabelEncoder()\n",
    "le_AIRLINE_DELAY = LabelEncoder()\n",
    "le_LATE_AIRCRAFT_DELAY = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs['AIRLINE_n'] = le_AIRLINE.fit_transform(inputs['AIRLINE'])\n",
    "inputs['ORIGIN_AIRPORT_n'] = le_ORIGIN_AIRPORT.fit_transform(inputs['ORIGIN_AIRPORT'])\n",
    "inputs['DESTINATION_AIRPORT_n'] = le_DESTINATION_AIRPORT.fit_transform(inputs['DESTINATION_AIRPORT'])\n",
    "inputs['DAY_OF_WEEK_n'] = le_DAY_OF_WEEK.fit_transform(inputs['DAY_OF_WEEK'])\n",
    "inputs['WEATHER_DELAY_n'] = le_DAY_OF_WEEK.fit_transform(inputs['WEATHER_DELAY'])\n",
    "inputs['SECURITY_DELAY_n'] = le_DAY_OF_WEEK.fit_transform(inputs['SECURITY_DELAY'])\n",
    "inputs['AIR_SYSTEM_DELAY_n'] = le_DAY_OF_WEEK.fit_transform(inputs['AIR_SYSTEM_DELAY'])\n",
    "inputs['AIRLINE_DELAY_n'] = le_DAY_OF_WEEK.fit_transform(inputs['AIRLINE_DELAY'])\n",
    "inputs['LATE_AIRCRAFT_DELAY_n'] = le_DAY_OF_WEEK.fit_transform(inputs['LATE_AIRCRAFT_DELAY'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AIRLINE</th>\n",
       "      <th>ORIGIN_AIRPORT</th>\n",
       "      <th>DESTINATION_AIRPORT</th>\n",
       "      <th>DAY_OF_WEEK</th>\n",
       "      <th>WEATHER_DELAY</th>\n",
       "      <th>SECURITY_DELAY</th>\n",
       "      <th>AIR_SYSTEM_DELAY</th>\n",
       "      <th>AIRLINE_DELAY</th>\n",
       "      <th>LATE_AIRCRAFT_DELAY</th>\n",
       "      <th>AIRLINE_n</th>\n",
       "      <th>ORIGIN_AIRPORT_n</th>\n",
       "      <th>DESTINATION_AIRPORT_n</th>\n",
       "      <th>DAY_OF_WEEK_n</th>\n",
       "      <th>WEATHER_DELAY_n</th>\n",
       "      <th>SECURITY_DELAY_n</th>\n",
       "      <th>AIR_SYSTEM_DELAY_n</th>\n",
       "      <th>AIRLINE_DELAY_n</th>\n",
       "      <th>LATE_AIRCRAFT_DELAY_n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSP</td>\n",
       "      <td>CVG</td>\n",
       "      <td>1</td>\n",
       "      <td>218.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>224</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>218</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSY</td>\n",
       "      <td>LGA</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>188</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSY</td>\n",
       "      <td>LGA</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>188</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSY</td>\n",
       "      <td>LGA</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>136.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>188</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>136</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>9E</td>\n",
       "      <td>MSY</td>\n",
       "      <td>LGA</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>154.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>188</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>154</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   AIRLINE ORIGIN_AIRPORT DESTINATION_AIRPORT  DAY_OF_WEEK  WEATHER_DELAY  \\\n",
       "9       9E            MSP                 CVG            1          218.0   \n",
       "27      9E            MSY                 LGA            5            0.0   \n",
       "30      9E            MSY                 LGA            1            0.0   \n",
       "31      9E            MSY                 LGA            2            0.0   \n",
       "34      9E            MSY                 LGA            5            0.0   \n",
       "\n",
       "    SECURITY_DELAY  AIR_SYSTEM_DELAY  AIRLINE_DELAY  LATE_AIRCRAFT_DELAY  \\\n",
       "9              0.0              11.0            0.0                  0.0   \n",
       "27             0.0              19.0            0.0                  0.0   \n",
       "30             0.0              19.0            0.0                  0.0   \n",
       "31             0.0               0.0          136.0                  0.0   \n",
       "34             0.0               0.0          154.0                  0.0   \n",
       "\n",
       "    AIRLINE_n  ORIGIN_AIRPORT_n  DESTINATION_AIRPORT_n  DAY_OF_WEEK_n  \\\n",
       "9           0               224                     80              0   \n",
       "27          0               225                    188              4   \n",
       "30          0               225                    188              0   \n",
       "31          0               225                    188              1   \n",
       "34          0               225                    188              4   \n",
       "\n",
       "    WEATHER_DELAY_n  SECURITY_DELAY_n  AIR_SYSTEM_DELAY_n  AIRLINE_DELAY_n  \\\n",
       "9               218                 0                  11                0   \n",
       "27                0                 0                  19                0   \n",
       "30                0                 0                  19                0   \n",
       "31                0                 0                   0              136   \n",
       "34                0                 0                   0              154   \n",
       "\n",
       "    LATE_AIRCRAFT_DELAY_n  \n",
       "9                       0  \n",
       "27                      0  \n",
       "30                      0  \n",
       "31                      0  \n",
       "34                      0  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs_n = inputs.drop(['AIRLINE', 'ORIGIN_AIRPORT', 'DESTINATION_AIRPORT','DAY_OF_WEEK','SECURITY_DELAY','AIR_SYSTEM_DELAY','AIRLINE_DELAY','LATE_AIRCRAFT_DELAY'],axis='columns')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WEATHER_DELAY</th>\n",
       "      <th>AIRLINE_n</th>\n",
       "      <th>ORIGIN_AIRPORT_n</th>\n",
       "      <th>DESTINATION_AIRPORT_n</th>\n",
       "      <th>DAY_OF_WEEK_n</th>\n",
       "      <th>WEATHER_DELAY_n</th>\n",
       "      <th>SECURITY_DELAY_n</th>\n",
       "      <th>AIR_SYSTEM_DELAY_n</th>\n",
       "      <th>AIRLINE_DELAY_n</th>\n",
       "      <th>LATE_AIRCRAFT_DELAY_n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>218.0</td>\n",
       "      <td>0</td>\n",
       "      <td>224</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>218</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>188</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>188</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>188</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>136</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>225</td>\n",
       "      <td>188</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>154</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    WEATHER_DELAY  AIRLINE_n  ORIGIN_AIRPORT_n  DESTINATION_AIRPORT_n  \\\n",
       "9           218.0          0               224                     80   \n",
       "27            0.0          0               225                    188   \n",
       "30            0.0          0               225                    188   \n",
       "31            0.0          0               225                    188   \n",
       "34            0.0          0               225                    188   \n",
       "\n",
       "    DAY_OF_WEEK_n  WEATHER_DELAY_n  SECURITY_DELAY_n  AIR_SYSTEM_DELAY_n  \\\n",
       "9               0              218                 0                  11   \n",
       "27              4                0                 0                  19   \n",
       "30              0                0                 0                  19   \n",
       "31              1                0                 0                   0   \n",
       "34              4                0                 0                   0   \n",
       "\n",
       "    AIRLINE_DELAY_n  LATE_AIRCRAFT_DELAY_n  \n",
       "9                 0                      0  \n",
       "27                0                      0  \n",
       "30                0                      0  \n",
       "31              136                      0  \n",
       "34              154                      0  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inputs_n.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9     218.0\n",
       "27     -6.0\n",
       "30     -7.0\n",
       "31    142.0\n",
       "34    180.0\n",
       "Name: DEPARTURE_DELAY, dtype: float64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Format Test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "te_AIRLINE = LabelEncoder()\n",
    "te_ORIGIN_AIRPORT = LabelEncoder()\n",
    "te_DESTINATION_AIRPORT = LabelEncoder()\n",
    "te_DAY_OF_WEEK = LabelEncoder()\n",
    "te_WEATHER_DELAY = LabelEncoder()\n",
    "te_SECURITY_DELAY = LabelEncoder()\n",
    "te_AIR_SYSTEM_DELAY = LabelEncoder()\n",
    "te_AIRLINE_DELAY = LabelEncoder()\n",
    "te_LATE_AIRCRAFT_DELAY = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs_test['AIRLINE_n'] = te_AIRLINE.fit_transform(inputs_test['AIRLINE'])\n",
    "inputs_test['ORIGIN_AIRPORT_n'] = te_ORIGIN_AIRPORT.fit_transform(inputs_test['ORIGIN_AIRPORT'])\n",
    "inputs_test['DESTINATION_AIRPORT_n'] = te_DESTINATION_AIRPORT.fit_transform(inputs_test['DESTINATION_AIRPORT'])\n",
    "inputs_test['DAY_OF_WEEK_n'] = te_DAY_OF_WEEK.fit_transform(inputs_test['DAY_OF_WEEK'])\n",
    "inputs_test['WEATHER_DELAY_n'] = te_DAY_OF_WEEK.fit_transform(inputs_test['WEATHER_DELAY'])\n",
    "inputs_test['SECURITY_DELAY_n'] = te_DAY_OF_WEEK.fit_transform(inputs_test['SECURITY_DELAY'])\n",
    "inputs_test['AIR_SYSTEM_DELAY_n'] = te_DAY_OF_WEEK.fit_transform(inputs_test['AIR_SYSTEM_DELAY'])\n",
    "inputs_test['AIRLINE_DELAY_n'] = te_DAY_OF_WEEK.fit_transform(inputs_test['AIRLINE_DELAY'])\n",
    "inputs_test['LATE_AIRCRAFT_DELAY_n'] = te_DAY_OF_WEEK.fit_transform(inputs_test['LATE_AIRCRAFT_DELAY'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "inputs_test_n = inputs_test.drop(['AIRLINE', 'ORIGIN_AIRPORT', 'DESTINATION_AIRPORT','DAY_OF_WEEK','SECURITY_DELAY','AIR_SYSTEM_DELAY','AIRLINE_DELAY','LATE_AIRCRAFT_DELAY'],axis='columns')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import tree\n",
    "model = tree.DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = model.fit(inputs_n, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.994229581596418"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(inputs_n,target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn = KNeighborsClassifier(n_neighbors=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(inputs_n, target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2315436673357007"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.score(inputs_n,target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import metrics, linear_model\n",
    "regr = linear_model.LinearRegression()\n",
    "regr.fit(inputs_n,target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.994229581596418"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(inputs_n,target)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
